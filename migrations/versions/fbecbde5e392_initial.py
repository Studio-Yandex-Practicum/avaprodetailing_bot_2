"""initial

Revision ID: fbecbde5e392
Revises: 
Create Date: 2024-04-22 03:42:49.783742

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fbecbde5e392'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bonus_cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('type', sa.Enum('ACCRUAL', 'WRITE_OFF', name='bonustype'), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('business_units',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('note', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('service_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('note', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('user_agreement', sa.Boolean(), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', 'SUPERADMIN', name='userrole'), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('last_name', sa.String(length=120), nullable=True),
    sa.Column('first_name', sa.String(length=120), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('note', sa.String(length=120), nullable=True),
    sa.Column('tg_user_id', sa.Integer(), nullable=True),
    sa.Column('business_unit_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['business_unit_id'], ['business_units.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bonuses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('used_amount', sa.Integer(), nullable=False),
    sa.Column('full_amount', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_accrual', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('admin_user_id', sa.Integer(), nullable=True),
    sa.Column('case_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['case_id'], ['bonus_cases.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cars',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('brand', sa.String(length=20), nullable=False),
    sa.Column('model', sa.String(length=20), nullable=False),
    sa.Column('number', sa.String(length=20), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('car_body_type', sa.Enum('SEDAN', 'COUPE', 'HATCHBACK', 'LIFTBACK', 'FASTBACK', 'STATION_WAGON', 'CROSSOVER', 'OFFROAD', 'PICKUP', 'VAN', 'MINIVAN', 'COMPACT_VAN', 'MICROVAN', 'CONVERTIBLE', 'ROADSTER', 'TARGA', 'LANDAU', 'LIMOUSINE', name='carbodytype'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('service_unit',
    sa.Column('business_unit_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['business_unit_id'], ['business_units.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('business_unit_id', 'service_id')
    )
    op.create_table('visits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('summ', sa.Integer(), nullable=False),
    sa.Column('payment_type_online', sa.Boolean(), nullable=False),
    sa.Column('payment_state', sa.Enum('WAITING', 'PAID', 'NOT_PAID', name='paymentstate'), nullable=False),
    sa.Column('business_unit_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('admin_user_id', sa.Integer(), nullable=False),
    sa.Column('car_id', sa.Integer(), nullable=False),
    sa.Column('services', sa.String(), nullable=False),
    sa.CheckConstraint('summ >= 0', name='check_summ_positive'),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['business_unit_id'], ['business_units.id'], ),
    sa.ForeignKeyConstraint(['car_id'], ['cars.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('visits')
    op.drop_table('service_unit')
    op.drop_table('cars')
    op.drop_table('bonuses')
    op.drop_table('users')
    op.drop_table('services')
    op.drop_table('service_categories')
    op.drop_table('business_units')
    op.drop_table('bonus_cases')
    # ### end Alembic commands ###
